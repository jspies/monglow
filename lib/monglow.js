// Generated by CoffeeScript 1.3.1
(function() {
  var Monglow, MonglowModel, MonglowRelation, Mongolian,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Mongolian = require("mongolian");

  MonglowModel = (function() {

    MonglowModel.name = 'MonglowModel';

    function MonglowModel() {
      Object.defineProperty(this, "model_name", {
        enumerable: false
      });
      Object.defineProperty(this, "client", {
        enumerable: false
      });
      Object.defineProperty(this, "references_many", {
        enumerable: false
      });
    }

    MonglowModel.find = function(callback) {
      var req, self;
      self = this;
      req = this.client.collection(this.model_name).find();
      return req.toArray(function(err, items) {
        var item, model, objects, _i, _len;
        objects = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          model = new self.model(item);
          model.model_name = self.model_name;
          objects.push(model);
        }
        if (callback) {
          return callback(err, objects);
        }
      });
    };

    return MonglowModel;

  })();

  Object.defineProperty(MonglowModel.prototype, "save", {
    value: function(attributes, callback) {
      var self;
      self = this;
      if (typeof attributes === "function") {
        callback = attributes;
      }
      return this.client.collection(this.model_name).save(this, function(err, result) {
        if (err) {

        } else {
          self._id = result._id;
        }
        if (callback) {
          return callback(err, result);
        }
      });
    }
  });

  Object.defineProperty(MonglowModel.prototype, "fields", {
    value: function() {
      var name, value, _fields;
      _fields = {};
      for (name in this) {
        value = this[name];
        if (name !== "constructor") {
          _fields[name] = value;
        }
      }
      return _fields;
    }
  });

  Object.defineProperty(MonglowModel.prototype, "remove", {
    value: function() {
      if (this._id) {
        return this.client.collection(this.model_name).remove({
          _id: this._id
        });
      }
    },
    enumerable: false
  });

  Monglow = (function() {

    Monglow.name = 'Monglow';

    function Monglow(server_string) {
      this.server_string = server_string;
    }

    Monglow.prototype.connect = function(server_string) {
      if (this.connected(server_string)) {
        return this.Client;
      }
      if (server_string) {
        this.server_string = server_string;
      }
      if (!this.server_string) {
        this.server_string = "mongo://127.0.0.1:27017/monglow_test";
      }
      return this.Client = new Mongolian(this.server_string);
    };

    Monglow.prototype.connected = function(server_string) {
      return this.Client && (typeof server_string === "undefined" || server_string === this.server_string);
    };

    Monglow.prototype.close = function() {
      return this.Client.close();
    };

    Monglow.prototype.model = function(name, options) {
      var Model, model_name, that;
      that = this;
      model_name = name;
      Model = (function(_super) {

        __extends(Model, _super);

        Model.name = 'Model';

        Model.model_name = name;

        Model.client = that.Client;

        Model.model = Model;

        if (options) {
          Model.references_many = options.references_many;
        }

        function Model(params) {
          var name, ref, value, _i, _len, _ref;
          this.model_name = model_name;
          this.client = that.Client;
          if (options) {
            this.references_many = options.references_many;
          }
          if (this.references_many) {
            _ref = this.references_many;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              ref = _ref[_i];
              this[ref] = new MonglowRelation;
              Object.defineProperty(this, ref, {
                enumerable: false
              });
            }
          }
          for (name in params) {
            value = params[name];
            if (!this[name]) {
              this[name] = value;
            }
          }
          Model.__super__.constructor.call(this, params);
        }

        return Model;

      })(MonglowModel);
      Object.defineProperty(Model.prototype, 'constructor', {
        enumerable: false
      });
      return Model;
    };

    return Monglow;

  })();

  MonglowRelation = (function() {

    MonglowRelation.name = 'MonglowRelation';

    function MonglowRelation() {
      this.ids = [];
      this.all = [];
    }

    return MonglowRelation;

  })();

  Object.defineProperty(MonglowRelation.prototype, 'push', {
    enumerable: false,
    value: function(object) {
      this.ids.push(object._id);
      return this.all.push(object);
    }
  });

  module.exports = new Monglow;

}).call(this);
